#!/usr/bin/env perl

use strict;
use warnings;

use Test::More tests => 15;

use lib "lib";
use Log::Log4perl qw(:easy);
Log::Log4perl->easy_init($WARN);
use RUM::Config qw(parse_organisms format_config);
use RUM::Task qw(report @QUEUE make_path_rule target action rule ftp_rule 
                 satisfy_with_command build chain enqueue);
use Carp;

use Getopt::Long;

################################################################################
###
### Config
###

my $ROOT = "_testing";

my $TEST_DATA_URL = "http://pgfi.rum.s3.amazonaws.com/rum-test-data.tgz";
my $ORGANISMS_URL = "http://itmat.rum.s3.amazonaws.com/organisms.txt",

# Locations of input files and dirs
my $CONFIG_FILE         = "$ROOT/rum.config_mm9";
my $TEST_INDEX_DIR      = "$ROOT/indexes";
my $TEST_DATA_TARBALL   = "$ROOT/rum-test-data.tgz";
my $RESOURCES_DIR       = "$ROOT/rum-test-data";
my $ORGANISMS_FILE      = "$ROOT/organisms.txt";
my $TEST_SCRIPT_DIR     = "orig/scripts";
my $TEST_LIB_DIR        = "orig/lib";

# The test data tarball gives us a set of input files for Rum, some
# expected output files, and the executables for bowtie, blat, and
# mdust.
my $INPUT_DATA          = "$RESOURCES_DIR/test_mouse/s_1_1.baby";
my $BIN_DIR             = "$RESOURCES_DIR/bin-$^O";

# These files are produced by Rum
my @RUM_OUTPUT_FILES = qw(PostProcessing-errorlog        
                          junctions_all.rum
                          RUM.sam
                          junctions_high-quality.bed
                          RUM_NU
                          mapping_stats.txt
                          RUM_NU.cov
                          RUM_NU.sorted
                          reads.fa
                          RUM_Unique
                          restart.ids
                          RUM_Unique.cov
                          RUM_Unique.sorted
                          feature_quantifications_Lane1
                          junctions_all.bed
                     );

sub expected_output_dir {
    my ($test_name) = @_;
    return "$RESOURCES_DIR/${test_name}-expected";
}

sub output_data_dir {
    my ($test_name) = @_;
    return "$ROOT/data/$test_name/Lane1";
}

# Rum produces these files too, but we don't compare them to the
# expected output because they're too variable.
my @IGNORED_RUM_OUTPUT_FILES = qw(rum.log_chunk.1
                                  rum.error-log
                                  postprocessing_Lane1.log
                                  rum.log_master);

my %CONFIG_DEFAULTS = (
    "bowtie-bin" => "$BIN_DIR/bowtie",
    "blat-bin"   => "$BIN_DIR/blat",
    "mdust-bin"  => "$BIN_DIR/mdust",
    "script-dir" => $TEST_SCRIPT_DIR,
    "lib-dir"    => $TEST_LIB_DIR);

my %CONFIGS = (
    "mouse" => {
        
        "rum_config" => {
            "gene-annotation-file" => "$TEST_INDEX_DIR/mm9_refseq_ucsc_vega_gene_info.txt",
            "bowtie-genome-index"  => "$TEST_INDEX_DIR/mm9_genome",
            "bowtie-gene-index"    => "$TEST_INDEX_DIR/mm9_genes",
            "blat-genome-index"    => "$TEST_INDEX_DIR/mm9_genome_one-line-seqs.fa"},

        genome_build => "mm9" 
    }
);

my $paths_exist = rule(
    name => "Make paths",
    depends_on => sub {
        my ($options, $run_name) = @_;
        print "Run name is $run_name\n";
        return [make_path_rule(expected_output_dir($run_name)),
                make_path_rule(output_data_dir($run_name))]
    });

# This task downloads the organisms text file to the current directory
my $download_organisims_txt = ftp_rule($ORGANISMS_URL, $ORGANISMS_FILE);

my $have_indexes = rule(
    name => "Download indexes",
    action => sub {
        my ($options, $run_name) = @_;

        my $build_name = $CONFIGS{$run_name}->{genome_build}
            or croak "I don't have a genome build id for run name $run_name";

        report "Parsing organisms file";
        open my $orgs, "<", $ORGANISMS_FILE;
        my @organisms = parse_organisms($orgs) 
            or croak "I can't parse the organisms file";
        
        # Filter the organisms to include only mouse
        @organisms = grep {$_->{build} eq $build_name} @organisms;
        
        # Get all the URLs listed for any orgs we're interested in
        my @urls = map { @{ $_->{files} } } @organisms;
        
        # For each of the URLs, enqueue a task that will download it
        for my $url (@urls) {
            my $file = $TEST_INDEX_DIR . "/" .
                substr($url, rindex($url, "/") + 1);
            if ($file =~ /^(.*)\.gz$/) {
                my $unzipped = $1;
                push @QUEUE, rule(
                    name => "Download and unzip $file",
                    target => sub { -f $unzipped },
                    action => chain(
                        satisfy_with_command("ftp", "-o", $file, $url),
                        satisfy_with_command("gunzip", $file)));
            }
            else {
                push @QUEUE, ftp_rule($url, $file);
            }
        }
    },
    depends_on => [make_path_rule($TEST_INDEX_DIR),
                   $download_organisims_txt]);

my $have_config_file = rule(
    name => "Make config file",
    target => sub { -f $CONFIG_FILE },
    action => sub {
        my ($options, $run_name) = @_;
        open my $out, ">", $CONFIG_FILE;
        my %config = %CONFIG_DEFAULTS;
        my $custom = $CONFIGS{$run_name}
            or croak "I don't have a configuration for build name $run_name";
        my %custom = %{ $custom->{rum_config} };
        @config{keys(%custom)} = values(%custom);
        print $out format_config(%config);
    },
    depends_on => [$paths_exist]);

my $have_test_data_tarball = ftp_rule($TEST_DATA_URL, $TEST_DATA_TARBALL);

my $have_test_data = rule(
    name => "Untar test data",
    target => sub { -f $INPUT_DATA },
    action => satisfy_with_command("tar", "-zxvf", $TEST_DATA_TARBALL, "-C", $ROOT),
    depends_on => [$have_test_data_tarball]);

sub all_output_files_exist_in_dir {
    return not grep { not -f "$_[0]/$_" } @RUM_OUTPUT_FILES;
}

my $run_rum_task = rule(
    name => "Rum",
    target => sub { 
        return all_output_files_exist_in_dir(output_data_dir("mouse")) 
    },
    action => satisfy_with_command("perl", "orig/RUM_runner.pl",
                                   $CONFIG_FILE,
                                   $INPUT_DATA, output_data_dir("mouse"),
                                   "1", 
                                   "Lane1"),
    depends_on => [$have_indexes,
                   $have_config_file,
                   $have_test_data]);

sub diff_cmd {
    my ($test_name, $file) = @_;
    my $expected_dir = expected_output_dir($test_name);
    my $output_dir   = output_data_dir($test_name);
    return "diff $expected_dir/$file $output_dir/$file";
}

my $compare_output_to_expected = rule(
    name   => "Compare Rum output to expected output",
    target => target { -f "diff.out" },
    action => action {
        my ($options, $run_name) = @_;
        print "Run name is $run_name\n";
        local $_;
        for my $file (@RUM_OUTPUT_FILES) {
            my $cmd = diff_cmd($run_name, $file);
            if ($options->{dry_run}) {
                print "$cmd\n";
            }
            else {
                open my $pipe, "$cmd |" or croak "Couldn't open $cmd";
                my $diffs = 0;
                while (defined (local $_ = <$pipe>)) {
                    $diffs++;
                    print;
                }
                is($diffs, 0, "No diffs for $file");
            }
        }
    },
    depends_on => [$have_test_data, $run_rum_task]);

sub main {

    GetOptions(
        "dry-run|n" => \(my $dry_run),
        "verbose|v" => \(my $verbose));
    
    my $build_options = {
        dry_run => $dry_run,
        verbose => $verbose
    };

    enqueue $compare_output_to_expected;
    build($build_options, "mouse");
}

main();



