#!/usr/bin/env perl

use strict;
use warnings;

use Test::More tests => 45;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use RUM::Workflow qw(shell is_on_cluster);
use RUM::TestUtils;
use RUM::Repository;
use Carp;
use Getopt::Long;
use File::Spec;
use File::Temp qw(tempdir);

################################################################################
###
### Configuration
###

my $repo = RUM::Repository->new(root_dir => "$Bin/../_testing")->setup;

# These files are produced by Rum
my @RUM_OUTPUT_FILES = qw(PostProcessing-errorlog        
                          junctions_all.rum
                          RUM.sam
                          junctions_high-quality.bed
                          RUM_NU
                          mapping_stats.txt
                          RUM_NU.cov
                          RUM_NU.sorted
                          reads.fa
                          RUM_Unique
                          restart.ids
                          RUM_Unique.cov
                          RUM_Unique.sorted
                          feature_quantifications_test
                          junctions_all.bed
                     );

# Rum produces these files too, but we don't compare them to the
# expected output because they're too variable.
my @IGNORED_RUM_OUTPUT_FILES = qw(rum.log_chunk.1
                                  rum.error-log
                                  postprocessing_test.log
                                  rum.log_master);

our @INPUT_FILES = map "$INPUT_DIR/$_.fq", qw(forward reverse);

my @TESTS = (
    {
        name => "arabidopsis-1k",
        genome_build  => "TAIR10" ,
        input_files   => \@INPUT_FILES,
        rum_options   => ["-noclean"],
        needs_cluster => 0
    },

    {
        name => "arabidopsis-1k-split",
        genome_build  => "TAIR10" ,
        input_files   => \@INPUT_FILES,
        rum_options   => ["-noclean"],
        chunks        => 2,
        needs_cluster => 0
    },

    {
        name => "arabidopsis-1k-grid",
        genome_build  => "TAIR10" ,
        input_files   => \@INPUT_FILES,
        rum_options   => ["-qsub", "-noclean"],
        needs_cluster => 1
    }
);

sub find_index {
    my ($genome_build) = @_;

    my @indexes = grep { $_->build eq $genome_build } $repo->indexes();

    croak "I didn't find exactly one index" unless @indexes == 1;
    return $indexes[0];
}


sub main {

    my @run_names = @ARGV;

    @run_names ||= map $_->{name}, @TESTS;

    my %should_run = map { ($_ => 1) } @run_names;

    for my $test (@TESTS) {

        my %test = %{ $test };
        my $name          =    $test{name};
        my $config        =    $test{config};
        my $needs_cluster =    $test{needs_cluster};
        my $genome_build  =    $test{genome_build};
        my @input_files   = @{ $test{input_files} };
        my $chunks        =    $test{chunks} || 1;
        my @options       = @{ $test{rum_options} };

      SKIP: {
            skip "requested by user", 15 unless $should_run{$name};
            skip "not on cluster", 15 if $needs_cluster && !is_on_cluster;
            
            # Download the index if we don't already have it
            my $index = find_index($genome_build);
            unless ($repo->has_index($index)) {
                diag "Getting index $index->{build}";
                $repo->install_index($index);
            }
            
            diag "Getting binaries";
            $repo->fetch_binaries;
            
            my $dir = tempdir(DIR => "$Bin/tmp");
            
            my $config = $repo->config_filename($index);

            my @args = ($config,
                        join(",,,", @input_files),
                        $dir,
                        $chunks,
                        $name, 
                        @options);

            diag "Running rum with @args";
            shell("perl", "bin/RUM_runner.pl", @args);
            
            for my $file (@RUM_OUTPUT_FILES) {
                ok(-f "$dir/$file", "$file exists");
            }
        }
    }
}

main();
