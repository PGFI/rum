#!/usr/bin/env perl 
# -*- cperl -*-

package RUM::Script::Indexes;

=head1 NAME

rum_indexes - List, install, or remove RUM indexes

=head1 SYNOPSIS

  rum_indexes [OPTIONS] [INDEX]
  rum_indexes # Run with no arguments for interactive mode

=head1 DESCRIPTION

Use this program to list, install, and remove your RUM indexes.

By default it will operate on the indexes installed at the same
location as this script. For example, if the script is located at
C<~/rum/bin/rum_indexes>, it will assume that config files are in
C<~/rum/conf> and indexes are in C<~/rum/indexes>. You can tell it to
use another location with the B<--prefix> option.

=head1 OPTIONS

=over 4

=item B<-l>, B<--list>

Print a list of available indexes, with a star next to any that are
already installed.

=item B<-i>, B<--install>

Install the index specified by the B<INDEX> argument. This can be the number of the index, according to the output of C<rum_indexes --list>, or a pattern that matches part of the index name.

=item B<-r>, B<--remove>

Remove the index specified by the B<INDEX> argument, which has the
same requirements as the B<INDEX> argument for the B<--install>
option.

=item B<--prefix> I<PREFIX>

Specify a different location for the repository.

=back

=head1 EXAMPLES

=head2 Listing Indexes

Get a list of all available indexes:

  $ ./bin/rum_indexes -l
  The following indexes are available. Indexes that you already
  have are marked with '*':

    1     hg19:                human (Homo sapiens)
  * 2     hg18:                human (Homo sapiens)
    3      mm9:                mouse (Mus musculus)
    4  danRer7:            zebrafish (Danio rerio)
  --- snip ---

Or filtered by a regular expression:

  $ ./bin/rum_indexes -l human
  The following indexes are available. Indexes that you already 
  have are marked with '*':

    1     hg19:                human (Homo sapiens)
  * 2     hg18:                human (Homo sapiens)
  --- snip ---

Or in another location:

  $ ./bin/rum_indexes -l human --prefix ~/rum/indexes
  --- snip ---

=head2 Installing Indexes

Install an index by build name, or number, or in another location:

  $ rum-indexes -i hg19
  $ rum-indexes -i 1
  $ rum-indexes -i 1 --prefix ~/rum/indexes

=head2 Removing Indexes

Remove an index by build name, or number, or in another location:

  $ rum-indexes -r hg19
  $ rum-indexes -r 1
  $ rum-indexes -i 1 --prefix ~/rum/indexes

=head2 Interactive mode

Run rum_indexes without any arguments to enter interactive mode, where
it will prompt you for indexes to install:

  $ rum_indexes

Or run it with just the B<--prefix> option to run interactive mode
pointing to a set of indexes in another location:

  $ rum_indexes --list --prefix ~/my-rum-indexes

=cut

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../lib";
use RUM::Repository;
use RUM::Script qw(get_options show_usage);
use POSIX;

sub new {
    my ($class) = @_;
    return bless {}, $class;
}

sub main {
    my ($self) = @_;

    get_options(
        "--list|l"    => \(my $do_list),
        "--install|i" => \(my $do_install),
        "--remove|r"  => \(my $do_remove),
        "--prefix|p=s"  => \(my $prefix),
        "--markdown"    => \(my $use_markdown));
    
    # show_usage() unless $do_list || $do_install || $do_remove;
    my %options;
    $options{root_dir} = $prefix if $prefix;

    $self->{repo} = RUM::Repository->new(%options);
    $self->{markdown} = $use_markdown;
    printf "Looking at the repository located at %s\n", $self->repo->root_dir;
    
    if ($do_list) {
        $self->list_indexes(@ARGV);
    }
    elsif ($do_install) {
        $self->install_index(@ARGV);
    }
    elsif ($do_remove) {
        $self->remove_index(@ARGV);
    }
    else {
        $self->interactive();
    }
}

sub repo { shift->{repo} }

sub list_indexes {
    my ($self, $pattern) = @_;
    $self->repo->setup;

    print <<EOF;
The following indexes are available.
Indexes that you already have are marked with '*':

EOF
    my %query;
    $query{pattern} = qr /$pattern/ if $pattern;
    $self->print_indexes($self->repo->indexes(%query));
}



sub print_indexes {
    my ($self, @indexes) = @_;

    my $i = 1;
    for my $idx (@indexes) {
        my $have = $self->repo->has_index($idx) ? "*" : " ";
        if ($self->{markdown}) {
            printf "%d. *%s* (build %s) (**%s**)\n",
                $idx->order, $idx->latin, $idx->build, $idx->common;
        }
        else {
            printf "%1s %2d %8s: %20s (%s)\n", 
                $have, $idx->order, $idx->build, $idx->common, $idx->latin;
        }
    }
}

sub select_indexes {
    my ($self, $spec) = @_;
    my $repo = $self->repo;
    $repo->setup;
    my @orgs = $repo->indexes;
    if (isdigit($spec)) {
        my @indexes = $repo->indexes;
        return ($indexes[$spec - 1]) if $spec > 0 && $spec <= @indexes;
    }
    
    return $repo->indexes(pattern => $spec);
}

sub select_index {
    my ($self, $spec) = @_;
    my @candidates = $self->select_indexes($spec);
    return $candidates[0] if @candidates == 1;
    
    if (@candidates > 1) {
        print <<EOF;
I found more than one index matching '$spec'; please be more specific:

EOF
        $self->print_indexes(@candidates);
        return undef;
    }

    if (@candidates == 0) {
        print <<EOF;

I don't have an index with a build name, common name, or latin name of
$spec. Please try $0 --list to see available indexes.
EOF
        return undef;
    }
    
}

my $callback = sub {
    my ($event, $url) = @_;
    print "$url\n" if $event eq 'start';
};

sub install_index {
    my ($self, $spec) = @_;
    $self->repo->setup;
    unless ($spec) {
        die <<EOF;
Please specify an index. Use $0 -l to see a list of available indexes.
EOF
    }
    my $org = $self->select_index($spec) or die "\n";
    print "Installing $org->{build}: $org->{common} ($org->{latin})\n";

    $self->repo->fetch_binaries();
    $self->repo->install_index($org, $callback);
}

sub remove_index {
    my ($self, $spec) = @_;
    $self->repo->setup;
    my $org = $self->select_index($spec) or die "\n";
    print "Removing $org->{build}: $org->{common} ($org->{latin})\n";
    my $callback = sub {
        my ($event, $file) = @_;
        print "  Removing $file\n" if $event eq 'start';
    };
    $self->repo->remove_index($org, $callback);
}

sub interactive {
    my ($self) = @_;

    my $prompt = "Enter the number of an index to install or q to quit: ";

    while (1) {
        print "-" x 80;
        $self->list_indexes();
        print "\n$prompt";
        my $response = <STDIN>;
        chomp $response;

        if ($response eq "q") {
            return;
        }
        else {
            my @indexes = $self->select_indexes($response);
            if (@indexes == 0) {
                $prompt  = "$response doesn't match an index.\n";
                $prompt .= "Please enter a number from the list or q to quit: ";
            }
            elsif (@indexes > 1) {
                $prompt  = "'$response' matches more than one index.\n";
                $prompt .= "Please enter a number from the list or q to quit: ";
            }
            else {
                my $idx = $indexes[0];
                printf "I'll install %s: %s (%s)\n", 
                    $idx->build, $idx->common, $idx->latin;
                $self->repo->fetch_binaries();
                $self->repo->install_index($idx, $callback);            
            }

        }
        
    }
}

__PACKAGE__->new->main;
